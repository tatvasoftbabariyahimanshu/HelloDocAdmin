@using HelloDocAdmin.Controllers.Authenticate
@model HelloDocAdmin.Entity.ViewModels.AdminSite.Schedule

<div class="modal-header bg-info text-white">
    <h1 class="modal-title fs-5" id="exampleModalLabel">Edit Shift</h1>
    <button type="button" class="btn btn-transparent btn-icon btn-lg text-light" data-bs-dismiss="modal" aria-label="Close">
        <i class="bi bi-x-circle"></i>
    </button>
</div>

<div class="modal-body container-fluid">


        <form id="formAddEditSave_UMS" class="row"
              onsubmit="return  onsmt()"
              asp-action="_EditShiftPost" asp-controller="Physician">
            <input type="hidden" asp-for="Shiftid" id="shiftid" />
  
    


        <div class="col-md-12 mt-2">
            <div class="mb-3">
                <div class="input-control w-100">
                    <select class="input-outline input-outline-select inp" disabled asp-for="Regionid" data-allow-clear="true" tabindex="-1" onchange="myFunction2()" id="region2" asp-items="@(new SelectList(ViewBag.RegionComboBox,"RegionId","RegionName"))" data-control="select2" data-placeholder="Select Level">
                        <option>All Region</option>
                    </select>
                </div>
            </div>
        </div>
        @if( CV.LoggedUserRole()=="Admin")
        {
            <div class="col-md-12 mt-2">
                <div class="mb-3">
                    <div class="input-control w-100">
                        <select class="input-outline input-outline-select inp" disabled asp-for="Physicianid" data-allow-clear="true" tabindex="-1" id="provider" data-control="select2" data-placeholder="Select Level">
                            <option value="">All Provider</option>
                        </select>
                    </div>
                </div>
            </div>
        }
       

        <div class="col-md-12 mt-2">
            <div class="mb-3">
                <div class="inputs-control">
                    <input placeholder=" " asp-for="ShiftDate" disabled id="StartDate" class="input-outline w-100 inp form-control-sm" type="date">
                    <label class="inputs-lable-dob">ShiftDate</label>
                </div>
            </div>
        </div>
       
        <div class="col-md-6">
            <div class="inputs-control">
                <input placeholder=" " id="StartTime" disabled asp-for="Starttime" class="input-outline w-100 inp form-control-sm" name="Starttime" type="time">
                <label class="inputs-lable-dob">Starttime</label>
            </div>
        </div>

        <div class="col-md-6">
            <div class="inputs-control">
                <input placeholder=" " id="EndTime" disabled asp-for="Endtime" class="input-outline w-100 inp form-control-sm" name="Endtime" type="time">
                <label class="inputs-lable-dob">Endtime</label>
            </div>
        </div>

        @{
            short i = 0;

            if (CV.LoggedUserRole() == "Admin")
            {
                i = 1;
            }
        }
        <input type="hidden" asp-for="Status" value="@i" id="checkWeekday" />

        <div class="text-end mt-2">
            @*<div class="btn btn-info text-white btn-sm " onclick="myFunction()" id="retunrcall">Return</div>*@
            <input id="save" style="display:none" type="submit" value="Save" class="btn btn-sm btn-info text-white " />
            <div id="edit" onclick="toggleCheckboxes()" class="btn btn-info text-white btn-sm">Edit</div>
            <div id="delete" class="btn btn-danger btn-sm">Delete</div>
            <button type="button" class="btn btn-outline-info btn-sm " id="cancel" data-bs-dismiss="modal">Return</button>
        </div>
    </form>
</div>

<script type="text/javascript">
    function onsmt() {
        

        // Prevent default form submission

        // Reset error messages
        let errorMessages = document.querySelectorAll(".err-msg");
        errorMessages.forEach(function (element) {
            element.textContent = ""; // Clear any existing error messages
        });

        // Validation flag
        let isValid = true;

        // Validate Startdate
        let StartDate = document.getElementById("StartDate");
        if (!StartDate.value) {
            let errorMessage = "Start Date is required.";
            displayErrorMessage(StartDate, errorMessage);
            isValid = false;
        }

        // Validate Starttime
        let StartTime = document.getElementById("StartTime");
        if (!StartTime.value) {
            let errorMessage = "Start Time is required.";
            displayErrorMessage(StartTime, errorMessage);
            isValid = false;
        }

        // Validate Endtime
        let EndTime = document.getElementById("EndTime");
        if (!EndTime.value) {
            let errorMessage = "End Time is required.";
            displayErrorMessage(EndTime, errorMessage);
            isValid = false;
        }

        if (EndTime.value < StartTime.value) {
            let errorMessage = "End Time is alway grater than  Start Time.";
            displayErrorMessage(EndTime, errorMessage);
            isValid = false;
        }

        var diff = EndTime.value - StartTime.value;
        let startTime = new Date("1970-01-01T" + StartTime.value);
        let endTime = new Date("1970-01-01T" + EndTime.value);

        // Calculate the time difference in milliseconds
        let timeDiff = endTime - startTime;

        // Convert milliseconds to hours and minutes
        let hours = Math.floor(timeDiff / 3600000); // 1 hour = 3600000 milliseconds
        let minutes = Math.floor((timeDiff % 3600000) / 60000); // 1 minute = 60000 milliseconds

        if (hours < 1) {
            let errorMessage = "Shift will be minimum of 1 hours.";
            displayErrorMessage(EndTime, errorMessage);
            isValid = false;
        }

      
        // If all validations pass, submit the form
        if (isValid) {

            $('#cancel').click();
            return true;
        }
        else {


            return false;
        }
    }
    function displayErrorMessage(inputElement, message) {
        console.log("demo");
        // Find the parent div of the input
        let parentDiv = inputElement.closest(".inputs-control") || inputElement.closest(".input-control");

        // Create a span element for the error message
        let errorMessageElement = document.createElement("span");
        errorMessageElement.className = "err-msg";
        errorMessageElement.textContent = message;

        // Append error message to the parent div
        parentDiv.appendChild(errorMessageElement);
    }

    function myFunction2() {
        var region = $("#region2").val();
        $.ajax({
            type: "POST",
            url: '@Url.Action("ProviderbyRegion","Dashboard")?Regionid=' + region,
            cache: false,
            success: function (response) {
                console.log("Response:", response); 

                var s = '<option value="-1">Please Select</option>';

                for (var i = 0; i < response.length; i++) {
                    s += '<option value="' + response[i].physicianid + '"';

                    if (response[i].physicianid.toString() === '@Model.Physicianid') {
                        console.log("Match found:", response[i].physicianid); 
                        s += ' selected';
                    }
                    s += '>'+ response[i].firstname + ' ' + response[i].lastname;

                    console.log("Comparing:", response[i].physicianid, "@Model.Physicianid"); 

                  
                    s += '</option>';
                }
                $("#provider").html(s);
            },
            error: function (xhr, status, error) {
                console.error("Error:", error); 
                alert("Error while checking email.");
            }
        });
    }
    function deleteshift() {
        var shiftid = $("#shiftid").val();
        $.ajax({
            type: "POST",
            url: '@Url.Action("_DeleteShiftPost","Physician")?id=' + shiftid,
            cache: false,
            success: function (response) {

                console.log(response);
                location.reload();
            },
            error: function () {
                alert("Not Deleted....");
            }
        });
    }

    document.getElementById('delete').addEventListener('click', (event) => {
        event.preventDefault();

        Swal.fire({
            title: "delete shift ?",
            showDenyButton: false,
            showCancelButton: true,
            confirmButtonText: "Yes",
            denyButtonText: `Don't delete`
        }).then((result) => {
            if (result.isConfirmed) {
                deleteshift();
            }
            console.log(result);
         
            if (result.isConfirmed) {
                Swal.fire("Save Changes!", "", "success");
            } else if (result.isDenied) {
                Swal.fire("Changes are not saved", "", "info");
            }
        });
    });

    
    $(document).ready(function () {
        myFunction2(); 
    });
    function toggleCheckboxes() {
        var StartDate = document.getElementById('StartDate');
        var StartTime = document.getElementById('StartTime');
        var EndTime = document.getElementById('EndTime');
        var save = document.getElementById('save');
        var edit = document.getElementById('edit');

        if (StartDate.disabled) {
       
            save.style.display = 'inline-block';
            edit.style.display = 'none';
            StartDate.disabled = false;
            StartTime.disabled = false;
            EndTime.disabled = false;
        } else {
          
            edit.style.display = 'inline-block';
            save.style.display = 'none';
            StartDate.disabled = true;
            StartTime.disabled = true;
            EndTime.disabled = true;
        }
    }
   
</script>

