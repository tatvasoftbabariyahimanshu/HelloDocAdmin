@model HelloDocAdmin.Entity.ViewModels.AdminSite.EmailRecords
@using static HelloDocAdmin.Entity.ViewModels.AdminSite.Constant;
@{
    var enumData = from RequestType e in Enum.GetValues(typeof(RequestType))
                   select new
                   {
                       ID = (int)e,
                       Name = e.ToString()
                   };
    var AccountType = from AccountType e in Enum.GetValues(typeof(AccountType))
                   select new
                   {
                       ID = (int)e,
                       Name = e.ToString()
                   };
    var Action1 = from Action1 e in Enum.GetValues(typeof(Action1))
                   select new
                   {
                       ID = (int)e,
                       Name = e.ToString()
                   };
}
<div class="table-responsive dashboard-tbl mt-4 " id="tbl">

    <table id="myTable" class="table table-responsive">
        <thead class=" text-start tablehead">
            <tr>
                <th scope="col">Recipient</th>
                <th scope="col">Action</th>
                <th scope="col">Role Name</th>
                <th scope="col">Email</th>

                <th scope="col">Created Date</th>
                <th scope="col">Send Date</th>
                <th scope="col">sent </th>
                <th scope="col">sent Tries </th>
                <th scope="col">Confirmation Number </th>

            </tr>
        </thead>
        <tbody>
            @foreach (var (item, i) in Model.List.Select((item, i) => (item, i)))
            {
                <tr>
                    <td scope="col" class="table-text">@item.Recipient</td>
                    <td scope="col" class="table-text">@Enum.GetName(typeof(Action1), item.Action)</td>
                    <td scope="col" class="table-text">@Enum.GetName(typeof(AccountType), item.Roleid)</td>
                    <td scope="col" class="table-text">@item.Emailid</td>
                     <td scope="col" class="table-text">@item.Createdate</td>
                      <td scope="col" class="table-text">@item.Sentdate</td>
                       <td scope="col" class="table-text">YES</td>
                    <td scope="col" class="table-text">@item.Senttries</td>
                    <td scope="col" class="table-text">@item.Confirmationnumber</td>

                
                </tr>




            }


        </tbody>
    </table>

</div>
@foreach (var (item, i) in Model.List.Select((item, i) => (item, i)))
{
    <div class="accordion-item text-secondary mt-2 " style="position:relative;" id="Acordiantable">
        <h2 class="accordion-header btn-i " id="flush-heading-@item.Emaillogid">
            <div class="p-3 collapsed border-bottom" type="button" data-bs-toggle="collapse" data-bs-target="#flush-@item.Emaillogid" aria-expanded="false" aria-controls="collapse_@item.Emaillogid">
                <div class="d-flex text-dark align-items-center justify-content-between w-100">
                    <div class="text-start mb-3 h6">

                        <b mx-2>@item.Recipient</b>
                    </div>


                </div>
                <div class="d-flex row  text-dark justify-content-between w-100 mb-3 ">
                    <div class="text-start h6">
                        <small>  Action Type : <b>@Enum.GetName(typeof(Action1), item.Action)</b></small>
                    </div>
                    <div class="text-start h6">
                        <small>  Email : <b>@item.Emailid</b></small>
                    </div>

                </div>

            </div>
        </h2>

        <div id="flush-@item.Emaillogid" class="accordion-collapse text-dark  position-relative  btn-i p-2 collapse mb-3 border-top" data-bs-parent="#accordionExample">

            <div class="accordion-body container-fluid">

                <p> <i class="fa fa-envelope border border-info rounded-pill p-1 me-2"></i><b>Role :</b> @Enum.GetName(typeof(AccountType), item.Roleid)</p>
                <p> <i class="fa fa-calendar border border-info rounded-pill p-1 me-2" aria-hidden="true"></i><b>Created Date</b> @item.Createdate</p>
                  <p> <i class="fa fa-calendar border border-info rounded-pill p-1 me-2" aria-hidden="true"></i><b>sent Date</b> @item.Sentdate</p>
                <p> <i class="fa fa-calendar border border-info rounded-pill p-1 me-2" aria-hidden="true"></i><b>Sent</b> Yes</p>
                <p> <i class="fa fa-calendar border border-info rounded-pill p-1 me-2" aria-hidden="true"></i><b>Sent Tries</b> @item.Senttries</p>
                <p> <i class="fa fa-calendar border border-info rounded-pill p-1 me-2" aria-hidden="true"></i><b>Conformation Number</b> @item.Confirmationnumber</p>






                
            </div>
        </div>

    </div>
}
<input type="hidden" id="crt-page" value="1" />
<div class="d-flex justify-content-between">
    <div class="text-start">

        <select id="SizeSelect" asp-for="pageSize" onchange="getfilterdata()" class="form-select">
            <option value="5" >5</option>
            <option value="10" selected>10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>
    <div class="text-center">
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item"><a class="page-link" onclick="getpage(@Model.CurrentPage-1); getfilterdata();">Previous</a></li>
                }

                @for (int i = Math.Max(1, (byte)Model.CurrentPage - 2); i <= Math.Min((byte)Model.TotalPage, (byte)Model.CurrentPage + 3); i++)
                {
                    <li class="page-item"><a class="page-link @(i == Model.CurrentPage ? "active" : "")" onclick="getpage(@i); getfilterdata();">@i</a></li>
                }

                @if (Model.CurrentPage < Model.TotalPage - 5)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                    <li class="page-item"><a class="page-link" onclick="getpage(@Model.TotalPage); getfilterdata();">@Model.TotalPage</a></li>
                }
                @if (Model.CurrentPage < Model.TotalPage)
                {
                    <li class="page-item"><a class="page-link" onclick="getpage(@Model.CurrentPage+1); getfilterdata();">Next</a></li>
                }
            </ul>
        </nav>
    </div>

</div>